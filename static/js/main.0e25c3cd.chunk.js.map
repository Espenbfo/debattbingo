{"version":3,"sources":["bingo.txt","components/BingoCell/index.js","components/Radio/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BingoCell","state","clicked","handleClick","isClicked","_this","setState","react_default","a","createElement","className","this","onClick","props","content","Component","Radio","handleChange","value","text","type","name","defaultChecked","checked","onChange","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","generateBoard","arguments","length","undefined","rawFile","XMLHttpRequest","open","require","onreadystatechange","readyState","status","allText","responseText","picks","generatePicks","pickedText","split","filter","item","key","indexOf","send","bind","assertThisInitialized","document","title","role","aria-label","style","display","flexDirection","marginTop","components_Radio","map","components_BingoCell","i","k","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e25c3cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bingo.ca77f28e.txt\";","import React, { Component } from 'react';\nimport './BingoCell.css';\n\nclass BingoCell extends Component {\n\n    state = {\n        clicked: false\n    };\n\n    handleClick = () => {\n        let isClicked = !this.state.clicked;\n        this.setState({clicked: isClicked});\n    };\n\n    render() {\n        return (\n            <div className={this.state.clicked ? \"cell cell-selected\" : \"cell\"} onClick={this.handleClick}>\n                <p>{this.props.content}</p>\n            </div>\n        );\n    }\n}\n\nexport default BingoCell;","import React, { Component } from 'react';\nimport './Radio.css';\n\nclass Radio extends Component {\n\n    // Hvis knappen endres, send melding om dette til parent.\n    handleChange = () => {\n        this.props.handleChange(this.props.value);\n    };\n\n    render() {\n        return (\n            <label className=\"container\">{this.props.text}\n                <input type=\"radio\" name={this.props.name} value={this.props.value} defaultChecked={this.props.checked} onChange={this.handleChange}/>\n                <span className=\"checkmark\"/>\n            </label>\n\n        );\n    }\n}\n\nexport default Radio;\n","import React, { Component } from 'react';\nimport BingoCell from './components/BingoCell';\nimport Radio from './components/Radio';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n  }\n\n  state = {\n      text: []\n  };\n\n  componentDidMount() {\n      this.generateBoard();\n      document.title = \"Tinderbingo\"\n  }\n\n  handleChange = (value) => {\n    console.log(value)\n    this.generateBoard(value);\n  };\n\n  static generatePicks(value = \"b\") {\n      let picks = [];\n      for (let i = 0; i < 16; i++) {\n\n          let k = Math.floor(Math.random() * 103);\n\n          if(value === \"m\") {\n              while (k >= 87) {\n                  k = Math.floor(Math.random() * 103);\n              }\n          }\n          else if(value === \"f\") {\n              while (68 < k && k < 87) {\n                  k = Math.floor(Math.random() * 103);\n              }\n          }\n          while(picks.indexOf(k) > -1) {\n              k = Math.floor(Math.random() * 69);\n          }\n          picks[i] = k;\n      }\n      return picks;\n  }\n\n  generateBoard = (value = \"b\") => {\n      let rawFile = new XMLHttpRequest();\n      rawFile.open(\"GET\", require(\"./bingo.txt\"), false);\n      rawFile.onreadystatechange = () => {\n          if (rawFile.readyState === 4) {\n              if (rawFile.status === 200 || rawFile.status === 0) {\n\n                  let allText = rawFile.responseText;\n\n                  let picks = App.generatePicks(value);\n\n                  let pickedText = allText.split(\"\\n\").filter(\n                      (item, key) => { return picks.indexOf(key) > -1 }\n                  );\n                  this.setState({\n                      text: pickedText\n                  });\n\n              }\n          }\n      };\n      rawFile.send(null);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n          <header className=\"App-header\">\n            <span className=\"logo\">\n              <span role=\"img\" aria-label=\"flame\">ðŸ”¥</span>\n              <span> Tinderbingo!</span>\n            </span>\n            <div style={{display: \"flex\", flexDirection: \"row\", marginTop: 5}}>\n              <Radio text={\"Menn\"} name={\"gender\"} value={\"m\"} checked={true} handleChange={this.handleChange}/>\n              <Radio text={\"Kvinner\"} name={\"gender\"} value={\"f\"} handleChange={this.handleChange}/>\n              <Radio text={\"Begge\"} name={\"gender\"} value={\"b\"} handleChange={this.handleChange}/>\n            </div>\n          </header>\n          <div className=\"bingoBoard\">\n              {\n                this.state.text.map((item, key) => {\n                    return <BingoCell key={key} content={item}/>;\n                })\n              }\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}