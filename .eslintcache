[{"C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\index.js":"1","C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\App.js":"2","C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\serviceWorker.js":"3","C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\components\\BingoCell\\index.js":"4","C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\components\\Radio\\index.js":"5","C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\index.js":"6","C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\App.js":"7","C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\serviceWorker.js":"8","C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\components\\Radio\\index.js":"9","C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\components\\BingoCell\\index.js":"10"},{"size":501,"mtime":1629729080046,"results":"11","hashOfConfig":"12"},{"size":8242,"mtime":1629730443944,"results":"13","hashOfConfig":"12"},{"size":5083,"mtime":1629728127715,"results":"14","hashOfConfig":"12"},{"size":400,"mtime":1629728127713,"results":"15","hashOfConfig":"12"},{"size":395,"mtime":1629728127713,"results":"16","hashOfConfig":"12"},{"size":501,"mtime":1630610097533,"results":"17","hashOfConfig":"18"},{"size":8241,"mtime":1630610097526,"results":"19","hashOfConfig":"18"},{"size":5083,"mtime":1630610097533,"results":"20","hashOfConfig":"18"},{"size":395,"mtime":1630610097531,"results":"21","hashOfConfig":"18"},{"size":400,"mtime":1630610097531,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13ieo61",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"76968p",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\index.js",[],"C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\App.js",["45"],"C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\serviceWorker.js",[],["46","47"],"C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\components\\BingoCell\\index.js",[],"C:\\Users\\espen\\WebstormProjects\\chickflick-bingo\\src\\components\\Radio\\index.js",[],"C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\index.js",[],"C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\App.js",["48"],"import React, { Component } from \"react\";\r\nimport BingoCell from \"./components/BingoCell\";\r\nimport Radio from \"./components/Radio\";\r\nimport logo from \"./github.svg\";\r\nimport heart from \"./assets/heart.png\";\r\nimport bingopile from \"./bingo.json\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCellChange = this.handleCellChange.bind(this);\r\n  }\r\n\r\n  state = {\r\n    text: [],\r\n    chosen_cells: [],\r\n    bingo_id: 0,\r\n    bingo_rows: [],\r\n    bingo_cols: [],\r\n    bingo_diagonal_down: false,\r\n    bingo_diagonal_up: false,\r\n    is_bingo: false,\r\n    showRules: false,\r\n    confirmReset: false,\r\n    bingo_type: \"b\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!!localStorage.getItem(\"bingoState\")) {\r\n      this.setState(JSON.parse(localStorage.getItem(\"bingoState\")));\r\n    } else {\r\n      this.generateBoard(\"m\");\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem(\"bingoState\", JSON.stringify(this.state));\r\n  }\r\n\r\n  handleCellChange = (value) => {\r\n    let cells = this.state.chosen_cells;\r\n    cells[value % 4][Math.floor(value / 4)] =\r\n      !cells[value % 4][Math.floor(value / 4)];\r\n    let bingo_rows = this.state.bingo_rows;\r\n    let bingo_cols = this.state.bingo_cols;\r\n    let bingo_diagonal_down = this.state.bingo_diagonal_down;\r\n    let bingo_diagonal_up = this.state.bingo_diagonal_up;\r\n    let is_bingo = false;\r\n    let is_full_bingo = cells.every(function (level2, i) {\r\n      return level2.every(function (bool) {\r\n        return bool;\r\n      });\r\n    });\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      if (!this.state.bingo_cols[i]) {\r\n        let colBingo = true;\r\n        for (let j = 0; j < 4; j++) {\r\n          if (!cells[i][j]) {\r\n            colBingo = false;\r\n          }\r\n        }\r\n        if (colBingo) {\r\n          bingo_cols[i] = true;\r\n          is_bingo = true;\r\n        }\r\n      }\r\n    }\r\n    if (!bingo_diagonal_down) {\r\n      let diagBingoDown = true;\r\n      for (let i = 0; i < 4; i++) {\r\n        if (!cells[i][i]) {\r\n          diagBingoDown = false;\r\n        }\r\n      }\r\n      if (diagBingoDown) {\r\n        bingo_diagonal_down = true;\r\n        is_bingo = true;\r\n      }\r\n    }\r\n    if (!bingo_diagonal_up) {\r\n      let diagBingoUp = true;\r\n      for (let i = 0; i < 4; i++) {\r\n        if (!cells[3 - i][i]) {\r\n          diagBingoUp = false;\r\n        }\r\n      }\r\n      if (diagBingoUp) {\r\n        bingo_diagonal_up = true;\r\n        is_bingo = true;\r\n      }\r\n    }\r\n    for (let i = 0; i < 4; i++) {\r\n      if (!this.state.bingo_rows[i]) {\r\n        let rowBingo = true;\r\n        for (let j = 0; j < 4; j++) {\r\n          if (!cells[j][i]) {\r\n            rowBingo = false;\r\n          }\r\n        }\r\n        if (rowBingo) {\r\n          bingo_rows[i] = true;\r\n          is_bingo = true;\r\n        }\r\n      }\r\n    }\r\n    is_bingo = is_full_bingo ? false : is_bingo;\r\n    const newState = {\r\n      text: this.state.text,\r\n      chosen_cells: cells,\r\n      bingo_rows: bingo_rows,\r\n      bingo_cols: bingo_cols,\r\n      bingo_diagonal_down: bingo_diagonal_down,\r\n      bingo_diagonal_up: bingo_diagonal_up,\r\n      is_bingo: is_bingo,\r\n      is_full_bingo: is_full_bingo,\r\n      bingo_id: this.state.bingo_id,\r\n      bingo_type: this.state.bingo_type,\r\n    };\r\n    this.setState(newState);\r\n    localStorage.setItem(\"bingoState\", JSON.stringify(newState));\r\n  };\r\n\r\n  generatePicks(bingopile) {\r\n    const chickFlickOptions = bingopile.optionsChickFlick\r\n    let picks = [];\r\n    for (let i = 0; i < 16; i++) {\r\n      let k = Math.floor(Math.random() * chickFlickOptions.length);\r\n      while (picks.indexOf(chickFlickOptions[k]) > -1) {\r\n        k = Math.floor(Math.random() * chickFlickOptions.length);\r\n      }\r\n      picks[i] = chickFlickOptions[k];\r\n    }\r\n    return picks;\r\n  }\r\n\r\n  generateBoard = () => {\r\n    let pickedText = this.generatePicks(bingopile);\r\n    let matrix = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      matrix[i] = [];\r\n      for (let j = 0; j < 4; j++) {\r\n        matrix[i][j] = false;\r\n      }\r\n    }\r\n    const initState = {\r\n      text: pickedText,\r\n      bingo_id: this.state.bingo_id + 16,\r\n      chosen_cells: matrix,\r\n      bingo_rows: [],\r\n      bingo_cols: [],\r\n      bingo_diagonal_down: false,\r\n      bingo_diagonal_up: false,\r\n      is_bingo: false,\r\n      is_full_bingo: false,\r\n      bingo_type: this.state.bingo_type,\r\n    };\r\n    localStorage.setItem(\"bingoState\", JSON.stringify(initState));\r\n    this.setState(initState);\r\n  };\r\n\r\n  compareRadioValue(value) {\r\n    return this.state.bingo_type.valueOf() === value.valueOf();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div\r\n          className={this.state.is_full_bingo ? \"popup show\" : \"popup\"}\r\n          onClick={() => this.setState({ is_full_bingo: false })}\r\n        >\r\n          <div className=\"bingotextUpper\">\r\n            <img src={heart} alt=\"Flamme\" />\r\n            <img src={heart} alt=\"Flamme\" />\r\n            <img src={heart} alt=\"Flamme\" />\r\n          </div>\r\n          <div className=\"bingotext\">\r\n            <span>Gratulerer, du har vunnet kvelden!</span>\r\n          </div>\r\n          <p>(Trykk for å lukke)</p>\r\n        </div>\r\n        <div\r\n          className={this.state.is_bingo ? \"popup show\" : \"popup\"}\r\n          onClick={() => this.setState({ is_bingo: false })}\r\n        >\r\n          <div className=\"bingotext\">\r\n            <img src={heart} alt=\"Flamme\" />\r\n            <span>Bingo!</span>\r\n            <img src={heart} alt=\"Flamme\" />\r\n          </div>\r\n          <p>(Trykk for å lukke)</p>\r\n        </div>\r\n        <div\r\n          className={this.state.showRules ? \"popup show\" : \"popup\"}\r\n          onClick={() => this.setState({ showRules: false })}\r\n        >\r\n          <div className=\"textWindow\">\r\n            <p>\r\n              <b>Regler / hvordan spille</b>\r\n            </p>\r\n            <br />\r\n            <p>\r\n              1) Sett på en chickflick\r\n            </p>\r\n            <br />\r\n            <p>\r\n              2) Alle krysser av på sitt eget brett og drikker en slurk når det\r\n              kommer situasjoner som matcher brettet.\r\n            </p>\r\n            <br />\r\n            <p>\r\n              3) Får du fire kryss på rad kan du dele ut fire slurker.\r\n              (vertikalt, horisontalt og diagonalt)\r\n            </p>\r\n            <br />\r\n            <p>\r\n              4) Vinneren er den som får fyllt hele bingokortet (eller h*n som\r\n              har flest når filmen er over)\r\n            </p>\r\n\r\n            <br />\r\n            <p>\r\n              <b>Alle skåler og drikker når</b>\r\n            </p>\r\n            <br />\r\n            <p>1) Noen kysser</p>\r\n            <br />\r\n            <p>2) En til regel</p>\r\n            <br />\r\n            <p>3) Enda en regel</p>\r\n            <br />\r\n            <p>4) Og en regel til igjen</p>\r\n          </div>\r\n          <p>(Trykk for å lukke)</p>\r\n        </div>\r\n\r\n        <div className=\"App-header\">\r\n          <span className=\"logo\">\r\n            <img src={heart} alt=\"Abakus logo\" />\r\n            <span> ChickFlick Bingo</span>\r\n          </span>\r\n          <div className=\"newBoard\">\r\n            <button onClick={() => this.generateBoard()}>\r\n              nytt brett\r\n            </button>\r\n          </div>\r\n          <div className=\"rules\">\r\n            <button onClick={() => this.setState({ showRules: true })}>\r\n              Regler\r\n            </button>\r\n          </div>\r\n          <div className=\"github\">\r\n            <a href={\"https://github.com/dotClique/chickflick-bingo\"}>\r\n              <img src={logo} alt=\"Github\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"bingoBoard\">\r\n          {this.state.text.map((item, key = 0) => {\r\n            key++;\r\n            return (\r\n              <BingoCell\r\n                key={this.state.bingo_id + key}\r\n                id={key - 1}\r\n                content={item}\r\n                clicked={\r\n                  this.state.chosen_cells[(key - 1) % 4][\r\n                    Math.floor((key - 1) / 4)\r\n                  ]\r\n                }\r\n                handleCellChange={this.handleCellChange}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\serviceWorker.js",[],"C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\components\\Radio\\index.js",[],"C:\\Users\\espen\\WebstormProjects\\debattbingo\\src\\components\\BingoCell\\index.js",[],{"ruleId":"49","severity":1,"message":"50","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":13},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":13},"no-unused-vars","'Radio' is defined but never used.","Identifier","unusedVar","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-global-assign","no-unsafe-negation"]